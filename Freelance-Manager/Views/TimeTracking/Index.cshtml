
@model List<TimeTrackingVM>
@{
    ViewData["Title"] = "Index";
}
<div class="container mb-5 px-4 mx-auto sm:px-6 lg:px-2">
    <h1 class="text-3xl sm:text-4xl lg:text-5xl font-extrabold text-gray-800 pb-2">Time Tracker</h1>
</div>
<div id="alart" class="fixed top-6 left-1/2 transform -translate-x-1/2 z-50"></div>

    <div class="container mx-auto py-4 max-w-full">
        <div class="space-y-2">

            <div class="rounded-lg border border-gray-200 bg-white shadow-sm">
                <div class="p-6 pt-0">
                    <div id="stopwatch" class="time-display text-5xl font-mono text-center my-6 text-black">00:00:00</div>
                    <div class="flex flex-col sm:flex-row justify-center gap-4">
                        <select id="TaskSelected" class="border border-gray-300 rounded-lg px-4 py-2 w-full sm:w-64 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                            <option value="" selected disabled>Select a Task</option>
                            @foreach (var item in ViewBag.AvailableMissions)
                            {
                                <option value="@item.Id">@item.Title</option>

                            }
                        </select>
                        <div class="flex gap-3 w-full sm:w-auto">
                            <button id="startPauseBtn" onclick="toggleTimer()" class="inline-flex items-center justify-center whitespace-nowrap rounded-lg text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-indigo-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-indigo-600 text-white hover:h-11 px-6 py-2 flex-1 sm:flex-none">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-play mr-2 h-5 w-5">
                                    <polygon points="6 3 20 12 6 21 6 3"></polygon>
                                </svg>
                                Start
                            </button>
                            <button onclick="stop()" class="inline-flex items-center justify-center whitespace-nowrap rounded-lg text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-indigo-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 h-11 px-6 py-2 flex-1 sm:flex-none">
                                Stop
                            </button>
                        </div>
                    </div>
                    @* <div class="mt-6 text-sm sm:text-base space-y-1 text-gray-700"> *@
                    @*      <p>Last time spent on this task: <span class="font-medium"></span></p> *@
                    @*      <p>Total time spent on this task: <span class="font-medium"></span></p>  *@
                    @* </div> *@
                </div>
            </div>


        </div>
    </div>


<div class="rounded-lg border border-gray-200 bg-white shadow-sm">
    <div class="flex flex-col space-y-1.5 p-6">
        <h3 class="text-2xl font-semibold leading-none tracking-tight text-gray-900">Recent Time Entries</h3>
    </div>
    <div class="p-6 pt-0">
        <div class="space-y-2">
            @foreach (var item in Model)
            {
                <div id="timetrakingId-@item.Id" class="task-entry flex flex-col sm:flex-row justify-between items-start sm:items-center p-4 border border-gray-200 rounded-lg gap-3 bg-white hover:shadow-md">
                    <div class="space-y-1">
                        @foreach (var mission in ViewBag.AvailableMissions)
                        {
                            if(mission.Id==item.MissionId)
                            {
                              <h4 class="font-medium text-gray-900">Task: @mission.Title</h4>
                            }
                        }
                        <div class="flex flex-wrap gap-x-4 gap-y-1 text-sm text-gray-500">
                            <p>Duration: @item.Duration</p>
                            <p>Date: @item.Date</p>
                        </div>
                    </div>
                    <div class="flex items-center gap-4 w-full sm:w-auto justify-between sm:justify-end mt-2 sm:mt-0">
                    
                            <button onclick="DeleteTask(@item.Id)"
                                    class="inline-flex items-center justify-center whitespace-nowrap text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-indigo-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-gray-100 h-9 rounded-lg px-3">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                                     viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                     stroke-linecap="round" stroke-linejoin="round"
                                     class="lucide lucide-trash2 h-4 w-4 text-red-500">
                                    <path d="M3 6h18"></path>
                                    <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path>
                                    <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
                                    <line x1="10" x2="10" y1="11" y2="17"></line>
                                    <line x1="14" x2="14" y1="11" y2="17"></line>
                                </svg>
                            </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>




<script>
    let timer;
    let running = false;
    let startTime;
    let elapsedTime = 0;
    let selectedValue = "";

    document.getElementById('TaskSelected').addEventListener('change', function () {
        selectedValue = this.value;
        console.log("User selected a task with ID:", selectedValue);
    });

    function updateDisplay() {
        const totalMs = elapsedTime + (running ? Date.now() - startTime : 0);
        const hours = Math.floor(totalMs / 3600000).toString().padStart(2, '0');
        const minutes = Math.floor((totalMs % 3600000) / 60000).toString().padStart(2, '0');
        const seconds = Math.floor((totalMs % 60000) / 1000).toString().padStart(2, '0');
        const display = document.getElementById('stopwatch');
        display.innerHTML = `${hours}:${minutes}:${seconds}`;

        if (running) {
            display.classList.add('text-indigo-300', 'drop-shadow-[0_0_8px_rgba(129,140,248,0.6)]');
        } else {
            display.classList.remove('text-indigo-300', 'drop-shadow-[0_0_8px_rgba(129,140,248,0.6)]');
            display.classList.add('text-indigo-300');
        }
    }

    function toggleTimer() {
        const btn = document.getElementById('startPauseBtn');
        const icon = btn.querySelector('svg');

        if (!running) {

            startTime = Date.now();
            running = true;
            timer = setInterval(updateDisplay, 100);
            updateDisplay();

            //  button "Pause"
            btn.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                    viewBox="0 0 24 24" fill="none" stroke="currentColor"
                    stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-pause mr-2 h-5 w-5">
                    <rect x="6" y="4" width="4" height="16"></rect>
                    <rect x="14" y="4" width="4" height="16"></rect>
                </svg>
                Pause
            `;
            btn.classList.remove('bg-indigo-600');
        btn.classList.add('bg-red-600');
        } else {

            elapsedTime += Date.now() - startTime;
            running = false;
            clearInterval(timer);
            updateDisplay();

            // button "Start"
            btn.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                    viewBox="0 0 24 24" fill="none" stroke="currentColor"
                    stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-play mr-2 h-5 w-5">
                    <polygon points="6 3 20 12 6 21 6 3"></polygon>
                </svg>
                Start
            `;
        }
    }


    function stop() {

        if (!selectedValue) {

            document.getElementById('alart').innerHTML = `
                  <div role="alert" class="rounded-md border border-gray-300 bg-white p-4 shadow-sm">
      <div class="flex items-start gap-4">
        <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 11.793a1 1 0 1 1-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 0 1-1.414-1.414L8.586 10 6.293 7.707a1 1 0 0 1 1.414-1.414L10 8.586l2.293-2.293a1 1 0 0 1 1.414 1.414L11.414 10l2.293 2.293Z"/>
        </svg>
        <span class="sr-only">Error icon</span>

        <div class="flex-1">
          <strong class="font-medium text-gray-900">Oops! </strong>

          <p class="mt-0.5 text-sm text-gray-700">Looks like you forgot to choose your mission. Please select a task to start tracking your epic progress!</p>
        </div>
      </div>
    </div>
            `;

            setTimeout(() => {
                dismissToast();
            }, 5000);
            return;
        }

        // if (running) {

            elapsedTime += Date.now() - startTime;
            running = false;
            clearInterval(timer);
            updateDisplay();


            const totalMs = elapsedTime;
            const hours = Math.floor(totalMs / 3600000).toString().padStart(2, '0');
            const minutes = Math.floor((totalMs % 3600000) / 60000).toString().padStart(2, '0');
            const seconds = Math.floor((totalMs % 60000) / 1000).toString().padStart(2, '0');
            const durationStr = `${hours}:${minutes}:${seconds}`;

            console.log(parseInt(selectedValue),durationStr)
            fetch('/TimeTracking/SaveTimeTracking', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    MissionId: parseInt(selectedValue),
                    Duration: durationStr
                })
            })
            .then(response => response.json())
    .then(data => {
        if (data.sucess) {
            console.log("Time tracking saved successfully");
            window.location.href = '/TimeTracking/Index';
        } else {
            console.error("Error: ", data.Message);
        }
    })
    .catch(error => {
        console.error("Error saving time tracking:", error);
    });

        

    // }



    }

    function dismissToast() {
        document.getElementById('alart').innerHTML = '';
    }
    var id;
    function DeleteTask(Id){
        id=Id;
         document.getElementById('alart').innerHTML = `
        <div role="alert" class="rounded-md border border-gray-300 bg-white p-4 shadow-sm">
            <div class="flex items-start gap-4">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                     stroke-width="1.5" stroke="currentColor" class="size-6 text-green-600">
                    <path stroke-linecap="round" stroke-linejoin="round"
                          d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>

                <div class="flex-1">
                    <strong class="font-medium text-gray-900">Confirm Delete</strong>
                    <p class="mt-0.5 text-sm text-gray-700">Are you sure you want to delete this task?</p>

                    <div class="mt-3 flex items-center gap-2">
                        <button type="button" onclick="Delete()" class="rounded border border-gray-300 px-3 py-1.5 text-sm font-medium text-gray-900 shadow-sm bg-red-400 transition-colors hover:bg-gray-100">
                            Delete
                        </button>
                        <button type="button" onclick="dismissToast()" class="rounded border border-transparent px-3 py-1.5 text-sm font-medium text-gray-700 transition-colors hover:text-gray-900">
                            Cancel
                        </button>
                    </div>
                </div>

                <button class="-m-3 rounded-full p-1.5 text-gray-500 transition-colors hover:bg-gray-50 hover:text-gray-700"
                        type="button" aria-label="Dismiss alert" onclick="dismissToast()">
                    <span class="sr-only">Cancel</span>
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                         stroke-width="1.5" stroke="currentColor" class="size-5">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
        </div>
    `;
        }

    function Delete() {
        fetch('/TimeTracking/Delete', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(id)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const elem = document.getElementById(`timetrakingId-${id}`);
                if (elem) {
                    elem.remove();
                }
                dismissToast();
            } else {
                console.error("Delete failed:", data.message);
            }
        })
        .catch(error => {
            console.error("Error during deletion:", error);
        });
    }

</script>

<style>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet" >


    .shadow-sm {
        box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    }

    .time-display {
        background-color: #f1f5f9;
        border-radius: 0.5rem;
        padding: 1rem;
    }

    .task-entry:hover {
        transform: translateY(-2px);
        transition: all 0.2s ease;
    }
</style>

