@model List<DashboardVM>

@{
    ViewData["Title"] = "Admin Dashboard";
}

<div class="container mb-5 px-4 mx-auto sm:px-6 lg:px-2">
    <h1 class="text-3xl sm:text-4xl lg:text-5xl font-extrabold text-gray-800 pb-2">Freelancers Overview</h1>
</div>
<script src="https://cdn.tailwindcss.com"></script>



<div class="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-4 p-4">
    @* active tasks *@
    <div class="p-6 bg-white shadow hover:shadow-lg duration-500 rounded-xl">
        <div class="flex justify-between">
            <h3 class="text-md">Active Tasks</h3>
            <span><i class="fa-solid fa-list-check"></i></span>
        </div>
        <div class="my-4 font-bold text-4xl">
            <h1>@ViewBag.TasksNum</h1>
        </div>
    </div>

    @* active Projects *@
    <div class="p-6 bg-white shadow hover:shadow-lg duration-500 rounded-xl">
        <div class="flex justify-between">
            <h3 class="text-md">Active Projects</h3>
            <span><i class="fa-solid fa-file-invoice"></i></span>
        </div>
        <div class="my-4 font-bold text-4xl">
            <h1>@ViewBag.ProjectsNum</h1>
        </div>
    </div>

    @* Active Clients *@
    <div class="p-6 bg-white shadow hover:shadow-lg duration-500 rounded-xl">
        <div class="flex justify-between">
            <h3 class="text-md">Active Clients </h3>
            <span><i class="fa-solid fa-users"></i></span>
        </div>
        <div class="my-4 font-bold text-4xl">
            <h1>@ViewBag.ClientsNum</h1>
        </div>
    </div>

    @* Pending Invoices
    *@
    <div class="p-6 bg-white shadow hover:shadow-lg duration-500 rounded-2xl">
        <div class="flex justify-between">
            <h3 class="text-md">Pending Invoices</h3>
            <span><i class="fa-solid fa-sack-dollar"></i></span>
        </div>
        <div class="my-4 font-bold text-4xl">
            <h1>$@ViewBag.PendingInvoices</h1>
        </div>
    </div>
</div>






@if (Model != null)
{
    <div class="max-w-7xl mx-auto px-4">
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4" id="freelancer-list">
            @foreach (var user in Model)
            {
                <div class="bg-white rounded-lg shadow-md p-6 relative freelancer-item" data-userid="@user.UserId">
                    <div class="flex flex-col space-y-4">
                        <h3 class="text-lg font-bold">@user.UserName</h3>

                        <p class="text-gray-500 project-count" data-missionid="@user.missionId" data-userid="@user.UserId">Count Project: @user.ProjectCount</p>
                        <p class="text-gray-500 mission-count" data-userid="@user.UserId">Mission Count: @user.MissionCount</p>
                        <p class="text-gray-600 total-duration" data-userid="@user.UserId">Total Hours: @user.TodayHours</p>

                        <div class="flex justify-between items-center">
                            <div class="flex gap-2 items-center">
                                <!-- Details Button -->
                                @* <button onclick="Details(@user.UserId)" *@
                                @*         class="w-8 h-8 rounded-full bg-gray-100 hover:bg-gray-200 text-gray-600 p-0 flex items-center justify-center"> *@
                                @*     <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" *@
                                @*          stroke-width="1.5" stroke="currentColor" class="w-5 h-5"> *@
                                @*         <path stroke-linecap="round" stroke-linejoin="round" *@
                                @*               d="M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z" /> *@
                                @*         <path stroke-linecap="round" stroke-linejoin="round" *@
                                @*               d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" /> *@
                                @*     </svg> *@
                                @* </button> *@

                                <!-- Delete Button -->
                                <form asp-action="Delete" method="post" class="w-8 h-8 my-1" id="delete-form-sumit-@user.UserId">
                                    <input type="hidden" name="UserId" value="@user.UserId" />
                                    <button type="button" class="w-full h-full rounded-full bg-red-100 hover:bg-red-200 text-red-600 flex items-center justify-center"
                                            onclick="showDeleteModal('@user.UserId')">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                             stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                            <path stroke-linecap="round" stroke-linejoin="round"
                                                  d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.1141.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
                                        </svg>
                                    </button>
                                </form>

                                <!-- Delete Confirmation Modal -->
                                <div id="delete-modal-@user.UserId"
                                     class="fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center hidden">
                                    <div class="bg-red-50 p-6 rounded-none border border-red-300 shadow-xl max-w-xs w-full">
                                        <div class="flex items-center mb-4">
                                            <svg class="shrink-0 w-6 h-6 me-2 text-red-800" aria-hidden="true"
                                                 xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                                <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
                                            </svg>
                                            <h3 class="text-xl font-bold text-red-800">Delete Confirmation</h3>
                                        </div>
                                        <div class="mb-6 text-red-800 text-center">
                                            Are you sure you want to delete this item? This action cannot be undone.
                                        </div>

                                        <div class="flex justify-between space-x-4">
                                            <button type="button"
                                                    class="flex-1 text-red-800 bg-transparent border-2 border-red-800 hover:bg-red-800 hover:text-white px-4 py-2 font-bold focus:outline-none"
                                                    onclick="document.getElementById('delete-modal-@user.UserId').classList.add('hidden')">
                                                Cancel
                                            </button>
                                            <button type="button"
                                                    class="flex-1 bg-red-800 text-white hover:bg-red-900 px-4 py-2 font-bold focus:outline-none border-2 border-red-800"
                                                    onclick="deleteFreelancer('@user.UserId')">
                                                Delete
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}
else
{
    <p id="no-freelancer-message">No freelancers available.</p>
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js" integrity="sha512-7SRCYIJtR6F8ocwW7UxW6wGKqbSyqREDbfCORCbGLatU0iugBLwyOXpzhkPyHIFdBO0K2VCu57fvP2Twgx1o2A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

@* <script src="~/lib/jquery/dist/jquery.min.js"></script>
 *@
 <script src="/lib/jquery/dist/jquery.min.js"></script>

 <script>
    var dashboardHub = new signalR.HubConnectionBuilder().withUrl("/dashboardHub").withAutomaticReconnect().build();

    dashboardHub.start().then(function () {
        console.log("Dashboard Hub connected");
    }).catch(function (err) {
        return console.error(err.toString());
    });

    dashboardHub.on("ProjectAdded", function (freelancerId) {
        var projElems = document.querySelectorAll(`p.project-count[data-userid="${freelancerId}"]`);
        projElems.forEach(function (elem) {
            var currentText = elem.innerText;
            var currentCount = parseInt(currentText.split(":")[1].trim());
            elem.innerText = "Projects: " + (currentCount + 1);
        });
    });

    dashboardHub.on("MissionAdded", function (freelancerId) {
        var missionElems = document.querySelectorAll(`p.mission-count[data-userid="${freelancerId}"]`);
        missionElems.forEach(function (elem) {
            var currentText = elem.innerText;
            var currentCount = parseInt(currentText.split(":")[1].trim());
            elem.innerText = "Mission Count: " + (currentCount + 1);
        });
    });

             dashboardHub.on("MissionDeleted", function (freelancerId) {
            var missionElems = document.querySelectorAll(`p.mission-count[data-userid="${freelancerId}"]`);
            missionElems.forEach(function (elem) {
                var currentText = elem.innerText;
                var currentCount = parseInt(currentText.split(":")[1].trim());
                elem.innerText = "Mission Count: " + (currentCount - 1);
            });
        });

                         dashboardHub.on("ProjectDeleted", function (freelancerId) {
        var projElems = document.querySelectorAll(`p.project-count[data-userid="${freelancerId}"]`);

               projElems.forEach(function (elem) {
                    var currentText = elem.innerText;
                    var currentCount = parseInt(currentText.split(":")[1].trim());
                    elem.innerText = "Project Count: " + (currentCount - 1);
                });
            });

     dashboardHub.on("DurationAdded", function (freelancerId, todayHours) {
        var missionElems = document.querySelectorAll(`p.total-duration[data-userid="${freelancerId}"]`);
        
        missionElems.forEach(function (elem) {

            elem.innerText = "Total Hours: " + todayHours ;
          
        });
    });
         dashboardHub.on("DurationDelete", function (freelancerId, totalTodayHours) {
        var missionElems = document.querySelectorAll(`p.total-duration[data-userid="${freelancerId}"]`);

        missionElems.forEach(function (elem) {
            elem.innerText = "Total Hours: " + totalTodayHours;
        });
    });

  


</script>
